================================================================================
                    GUIA FRONTEND - EMPRESA, FILIAL E USUÁRIOS
================================================================================

Este documento explica o funcionamento das entidades Empresa, Filial e Usuários,
suas rotas, ligações e o que o frontend precisa saber para funcionar corretamente.

================================================================================
                                ARQUITETURA MULTITENANT
================================================================================

O sistema utiliza arquitetura multitenant onde:
- Cada empresa (cliente) tem um TenantId único
- Todas as entidades (Empresa, Filial, Usuário, etc.) pertencem a um tenant
- O TenantId é extraído do token JWT e aplicado automaticamente via middleware
- O frontend NÃO precisa enviar TenantId nas requisições - é automático

================================================================================
                                ENTIDADES E LIGAÇÕES
================================================================================

1. EMPRESA
   - Entidade raiz do sistema
   - Contém informações básicas da empresa cliente
   - Possui múltiplas filiais
   - Cada empresa tem um TenantId único

2. FILIAL
   - Pertence a uma empresa (EmpresaId)
   - Representa unidades/escritórios da empresa
   - Possui múltiplos usuários
   - Possui múltiplos locais (salas, quadras, etc.)

3. USUÁRIO
   - Pertence a uma filial (FilialId)
   - Possui credenciais de acesso (email/senha)
   - Tem permissões e grupos de acesso
   - Último acesso e foto são rastreados

HIERARQUIA: Empresa → Filial → Usuário

================================================================================
                                ROTAS DA API
================================================================================

BASE URL: /api

----------------------------------------
1. EMPRESAS (/api/empresas)
----------------------------------------
GET    /api/empresas                    - Listar empresas (paginado)
GET    /api/empresas/{id}               - Obter empresa por ID
POST   /api/empresas                    - Criar empresa
PUT    /api/empresas/{id}               - Atualizar empresa
DELETE /api/empresas/{id}               - Remover empresa

Parâmetros de paginação:
- page: número da página
- pageSize: itens por página
- search: termo de busca
- sortBy: campo para ordenação
- sortOrder: asc/desc

----------------------------------------
2. FILIAIS (/api/filiais)
----------------------------------------
GET    /api/filiais                     - Listar filiais (paginado)
GET    /api/filiais/{id}                - Obter filial por ID
POST   /api/filiais                     - Criar filial
PUT    /api/filiais/{id}                - Atualizar filial
DELETE /api/filiais/{id}                - Remover filial

----------------------------------------
3. USUÁRIOS (/api/usuarios)
----------------------------------------
GET    /api/usuarios                    - Listar usuários (paginado)
GET    /api/usuarios/{id}               - Obter usuário por ID
POST   /api/usuarios                    - Criar usuário
PUT    /api/usuarios/{id}               - Atualizar usuário
DELETE /api/usuarios/{id}               - Remover usuário

----------------------------------------
4. GERENCIAMENTO (/api/gerencialmento)
----------------------------------------
POST   /api/gerencialmento/novo-cliente - Criar novo cliente (empresa + filial + usuário)
POST   /api/gerencialmento/alterar-senha - Alterar senha de usuário

NOTA: Rotas de gerenciamento só funcionam para TenantId = 1 (tenant master)

----------------------------------------
5. AUTENTICAÇÃO (/api/autenticacao)
----------------------------------------
POST   /api/autenticacao/entrar         - Login
POST   /api/autenticacao/refresh        - Renovar token

================================================================================
                                ESTRUTURAS DE DADOS
================================================================================

----------------------------------------
EMPRESA DTO
----------------------------------------
{
  "id": "guid",
  "dataCriacao": "datetime",
  "dataAtualizacao": "datetime?",
  "nome": "string",
  "cnpj": "string",
  "email": "string",
  "rua": "string",
  "numero": "string",
  "bairro": "string",
  "cidade": "string",
  "estado": "string",
  "cep": "string",
  "situacao": "Ativo|Inativo",
  "tenantId": "int"
}

----------------------------------------
FILIAL DTO
----------------------------------------
{
  "id": "guid",
  "dataCriacao": "datetime",
  "dataAtualizacao": "datetime?",
  "nome": "string",
  "codigo": "string",
  "endereco": "string",
  "cidade": "string",
  "estado": "string",
  "cep": "string",
  "telefone": "string",
  "email": "string",
  "cnpj": "string",
  "responsavel": "string",
  "situacao": "Ativo|Inativo",
  "dataAbertura": "datetime",
  "empresaId": "guid",
  "empresa": "EmpresaDTO",
  "tenantId": "int"
}

----------------------------------------
USUÁRIO DTO
----------------------------------------
{
  "id": "guid",
  "dataCriacao": "datetime",
  "dataAtualizacao": "datetime?",
  "nome": "string",
  "email": "string",
  "situacao": "Ativo|Inativo",
  "tenantId": "int",
  "telefone": "string",
  "cargo": "string",
  "filialId": "guid",
  "grupoId": "guid",
  "ultimoAcesso": "datetime",
  "foto": "string?",
  "permissoesCustomizadas": ["int"]
}

================================================================================
                                FLUXO DE CRIAÇÃO DE CLIENTE
================================================================================

Quando um novo cliente é criado via /api/gerencialmento/novo-cliente:

1. Sistema gera um novo TenantId único
2. Cria a empresa com o TenantId
3. Cria uma filial matriz automaticamente
4. Cria um usuário administrador
5. Retorna todas as informações criadas

Resposta da criação:
{
  "success": true,
  "message": "Novo cliente criado com sucesso",
  "data": {
    "tenantId": 2,
    "empresa": { /* EmpresaDTO */ },
    "filialMatriz": { /* FilialDTO */ },
    "usuarioAdmin": { /* UsuarioDTO */ },
    "senhaPadrao": "Admin@123"
  }
}

================================================================================
                                AUTENTICAÇÃO E TOKENS
================================================================================

1. LOGIN
   - POST /api/autenticacao/entrar
   - Body: { "email": "string", "senha": "string" }
   - Retorna token JWT com TenantId nos claims

2. TOKEN JWT
   - Contém TenantId no claim "TenantId"
   - Middleware extrai automaticamente
   - Todas as requisições usam o TenantId do token

3. REFRESH
   - POST /api/autenticacao/refresh
   - Renova o token sem precisar fazer login novamente

================================================================================
                                FILTROS AUTOMÁTICOS
================================================================================

O sistema aplica automaticamente:
- Filtro por TenantId em todas as consultas
- Usuário só vê dados do seu tenant
- Não é possível acessar dados de outros tenants
- Frontend não precisa se preocupar com isso

================================================================================
                                VALIDAÇÕES IMPORTANTES
================================================================================

1. CNPJ
   - Deve ser único por tenant
   - Formato: XX.XXX.XXX/XXXX-XX

2. EMAIL
   - Deve ser único por tenant
   - Formato válido de email

3. CEP
   - Pode ser validado via /api/utilitarios/cep/{cep}
   - Retorna endereço completo

4. SITUAÇÃO
   - Ativo: entidade disponível para uso
   - Inativo: entidade desabilitada

================================================================================
                                PERMISSÕES E GRUPOS
================================================================================

1. GRUPO ID
   - Cada usuário pertence a um grupo
   - Define permissões básicas

2. PERMISSÕES CUSTOMIZADAS
   - Lista de IDs de permissões específicas
   - Permite granularidade nas permissões

3. CARGO
   - Descrição do cargo/função do usuário
   - Pode ser usado para lógica de negócio

================================================================================
                                EXEMPLOS DE USO FRONTEND
================================================================================

1. LISTAR FILIAIS DA EMPRESA
   GET /api/filiais
   - Retorna apenas filiais do tenant atual
   - Inclui dados da empresa relacionada

2. CRIAR USUÁRIO EM UMA FILIAL
   POST /api/usuarios
   {
     "nome": "João Silva",
     "email": "joao@empresa.com",
     "telefone": "11999998888",
     "cargo": "Gerente",
     "filialId": "guid-da-filial",
     "grupoId": "guid-do-grupo"
   }

3. BUSCAR ENDEREÇO POR CEP
   GET /api/utilitarios/cep/12345678
   - Retorna dados completos do endereço

4. ALTERAR SENHA (apenas tenant master)
   POST /api/gerencialmento/alterar-senha
   {
     "email": "usuario@empresa.com",
     "novaSenha": "NovaSenha@123"
   }

================================================================================
                                CONSIDERAÇÕES DE SEGURANÇA
================================================================================

1. TODAS as rotas (exceto autenticação) requerem token JWT
2. TenantId é validado automaticamente
3. Usuário só acessa dados do seu tenant
4. Senhas são hasheadas com BCrypt
5. Tokens têm expiração
6. Rotas de gerenciamento restritas ao tenant master

================================================================================
                                CÓDIGOS DE STATUS HTTP
================================================================================

200 - Sucesso
201 - Criado com sucesso
204 - Removido com sucesso
400 - Dados inválidos
401 - Não autenticado
403 - Acesso negado
404 - Não encontrado
500 - Erro interno

================================================================================
                                RESPOSTAS PADRÃO
================================================================================

Todas as respostas seguem o formato:
{
  "success": true/false,
  "message": "string",
  "data": object,
  "errors": ["string"] // apenas em caso de erro
}

Para listagens paginadas:
{
  "success": true,
  "message": "string",
  "data": {
    "items": [/* array de itens */],
    "totalItems": 100,
    "totalPages": 10,
    "currentPage": 1,
    "pageSize": 10
  }
}

================================================================================
                                DICAS PARA O FRONTEND
================================================================================

1. Sempre incluir o token JWT no header Authorization
2. Não enviar TenantId nas requisições - é automático
3. Tratar erros 401/403 adequadamente
4. Implementar refresh automático de token
5. Usar paginação para listagens grandes
6. Validar dados antes de enviar
7. Usar o endpoint de CEP para preenchimento automático
8. Implementar loading states durante requisições
9. Tratar casos de rede offline
10. Implementar cache local quando apropriado

================================================================================
                                CONTATOS E SUPORTE
================================================================================

Para dúvidas sobre a API:
- Documentação Swagger: /swagger
- Logs de erro no console da aplicação
- Verificar status da API via /health

================================================================================ 